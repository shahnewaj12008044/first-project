There is two types of software design pattern:
a> MVC(Models Views Controllers)
b> Module system


MVC(Models Views Controllers) CONSISTS OF:
#Interfaces:
#Routes:
#Models:
#Views:
    ->template engine:
                    *ejs
                    *handlebars
                    *pugs
    ->Library/framework:
                    *React
                    *View 
                    *Angular


#Controllers:


----------
MODULAR SYSTEM:
**rules
    ->DRY (dont repeat yourself)
    ->Fat Model/ Thin Controller

In order to use moduler pattern using js you have to follow some steps:
    1.create a schema
    2.create a database Model
    3.Database query


In order to use moduler pattern using Ts you have to follow some steps:
    1.create Interface
    2.create schema
    3.create Database Model
    4.create Database query


STATIC METHOD VS INSTANCE METHOD IN MONGOOSE:

in mongoose there is two method by default available 1. static mehtod 2. instance method 
for example:
for inserting data we used studentModel.create()//its an example of built-in static method

in instance method it would be written as:
const student = new StudentModel()
student.save()


if we want we can create custom static method usnig:
 studentSchema.statics.isUserExist = async function(id: string) =>{
    return await user.findOne({id})
 } method
and we can create custom instances using: 
studentSchema.methods.isUserExist = async function(id: string) =>{
    return await user.findOne({id})
} 

const student = new StudentModel()
student.isUserExist('2342')

MIDDLEWIRE IN MONGOOSE:

mongoose middlewires are called mongoose hooks also 

there is several types of middlewires in mongoose:
1.Document middlewires:
    ->schema.pre('save',func)//array function must be avoided
    -schema.post('save',func)
    ->schema.pre('remove',func)
    ->schema.post('remove',func)

2.Aggreagation middlewires:
    ->schema.pre('aggregate',func)
    ->schema.post('aggregate',func)